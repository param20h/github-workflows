# Deployment Workflow
# This workflow handles deployment to different environments

name: Deploy Application

on:
  push:
    branches: [ main ]
  # Allow manual deployment
  workflow_dispatch:
    inputs:
      environment:
        description: 'Environment to deploy to'
        required: true
        default: 'staging'
        type: choice
        options:
          - staging
          - production

jobs:
  # Deploy to staging automatically on main branch pushes
  deploy-staging:
    if: github.ref == 'refs/heads/main' && github.event_name == 'push'
    runs-on: ubuntu-latest
    environment: staging
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18'
        cache: 'npm'
        
    - name: Install dependencies
      run: npm ci
      
    - name: Build application
      run: npm run build
      env:
        # Environment-specific configuration
        NODE_ENV: staging
        API_URL: ${{ vars.STAGING_API_URL }}
        
    - name: Deploy to staging
      run: |
        echo "Deploying to staging environment..."
        # Example deployment commands
        rsync -avz --delete dist/ user@staging-server:/var/www/app/
      env:
        DEPLOY_KEY: ${{ secrets.STAGING_DEPLOY_KEY }}
        
    - name: Run smoke tests
      run: |
        # Simple health check
        curl -f ${{ vars.STAGING_API_URL }}/health || exit 1
        
  # Deploy to production (manual approval required)
  deploy-production:
    if: |
      (github.ref == 'refs/heads/main' && github.event_name == 'workflow_dispatch' && inputs.environment == 'production') ||
      github.event_name == 'release'
    runs-on: ubuntu-latest
    environment: production
    needs: [deploy-staging]
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18'
        cache: 'npm'
        
    - name: Install dependencies
      run: npm ci
      
    - name: Build application
      run: npm run build
      env:
        NODE_ENV: production
        API_URL: ${{ vars.PRODUCTION_API_URL }}
        
    # Create backup before deployment
    - name: Create backup
      run: |
        echo "Creating backup of current production..."
        ssh user@prod-server "cp -r /var/www/app /var/www/app-backup-$(date +%Y%m%d-%H%M%S)"
      env:
        SSH_KEY: ${{ secrets.PRODUCTION_SSH_KEY }}
        
    - name: Deploy to production
      run: |
        echo "Deploying to production environment..."
        rsync -avz --delete dist/ user@prod-server:/var/www/app/
      env:
        DEPLOY_KEY: ${{ secrets.PRODUCTION_DEPLOY_KEY }}
        
    - name: Run production smoke tests
      run: |
        curl -f ${{ vars.PRODUCTION_API_URL }}/health || exit 1
        
    - name: Notify deployment success
      uses: 8398a7/action-slack@v3
      with:
        status: success
        text: 'Production deployment completed successfully! ðŸš€'
      env:
        SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}
        
    # Rollback on failure
    - name: Rollback on failure
      if: failure()
      run: |
        echo "Deployment failed, rolling back..."
        ssh user@prod-server "rm -rf /var/www/app && mv /var/www/app-backup-* /var/www/app"
      env:
        SSH_KEY: ${{ secrets.PRODUCTION_SSH_KEY }}
