# Issue and PR Automation Workflow
# This workflow automates issue and pull request management

name: Issue and PR Automation

on:
  issues:
    types: [opened, closed, labeled, unlabeled]
  pull_request:
    types: [opened, closed, ready_for_review, labeled, unlabeled]
  pull_request_review:
    types: [submitted]
  schedule:
    # Run stale issue check every day at 9 AM UTC
    - cron: '0 9 * * *'

jobs:
  # Welcome new contributors
  welcome:
    if: github.event.action == 'opened'
    runs-on: ubuntu-latest
    
    steps:
    - name: Welcome new issue
      if: github.event_name == 'issues'
      uses: actions/github-script@v7
      with:
        script: |
          const { owner, repo } = context.repo;
          const { number } = context.issue;
          
          // Check if this is the user's first issue
          const issues = await github.rest.issues.listForRepo({
            owner,
            repo,
            creator: context.payload.issue.user.login,
            state: 'all'
          });
          
          if (issues.data.length === 1) {
            await github.rest.issues.createComment({
              owner,
              repo,
              issue_number: number,
              body: `ðŸ‘‹ Welcome @${context.payload.issue.user.login}! 

              Thank you for opening your first issue. A maintainer will review it shortly.
              
              Please make sure you've provided:
              - [ ] A clear description of the issue
              - [ ] Steps to reproduce (if applicable)
              - [ ] Expected vs actual behavior
              - [ ] Environment details
              
              Don't forget to check our [contributing guidelines](CONTRIBUTING.md)!`
            });
          }
          
    - name: Welcome new pull request
      if: github.event_name == 'pull_request'
      uses: actions/github-script@v7
      with:
        script: |
          const { owner, repo } = context.repo;
          const { number } = context.issue;
          
          // Check if this is the user's first PR
          const prs = await github.rest.pulls.list({
            owner,
            repo,
            creator: context.payload.pull_request.user.login,
            state: 'all'
          });
          
          if (prs.data.length === 1) {
            await github.rest.issues.createComment({
              owner,
              repo,
              issue_number: number,
              body: `ðŸŽ‰ Thanks for your first pull request @${context.payload.pull_request.user.login}!

              A maintainer will review your changes soon. Here's what happens next:
              
              1. âœ… Automated checks will run
              2. ðŸ‘€ A maintainer will review your code
              3. ðŸ’¬ You might receive feedback for improvements
              4. âœ… Once approved, your PR will be merged!
              
              Thanks for contributing! ðŸš€`
            });
          }
          
  # Auto-label issues and PRs
  auto-label:
    if: github.event.action == 'opened'
    runs-on: ubuntu-latest
    
    steps:
    - name: Auto-label based on content
      uses: actions/github-script@v7
      with:
        script: |
          const { owner, repo } = context.repo;
          const issue = context.payload.issue || context.payload.pull_request;
          const number = issue.number;
          const title = issue.title.toLowerCase();
          const body = (issue.body || '').toLowerCase();
          
          const labels = [];
          
          // Bug-related keywords
          if (title.includes('bug') || title.includes('error') || title.includes('issue') || 
              body.includes('bug') || body.includes('error') || body.includes('broken')) {
            labels.push('bug');
          }
          
          // Feature request keywords
          if (title.includes('feature') || title.includes('enhancement') || 
              body.includes('feature request') || body.includes('enhancement')) {
            labels.push('enhancement');
          }
          
          // Documentation keywords
          if (title.includes('docs') || title.includes('documentation') || 
              body.includes('documentation') || body.includes('readme')) {
            labels.push('documentation');
          }
          
          // Question keywords
          if (title.includes('question') || title.includes('help') || 
              title.includes('how to') || body.includes('question')) {
            labels.push('question');
          }
          
          // Add priority based on keywords
          if (title.includes('urgent') || title.includes('critical') || 
              body.includes('urgent') || body.includes('critical')) {
            labels.push('priority: high');
          }
          
          // Apply labels if any were identified
          if (labels.length > 0) {
            await github.rest.issues.addLabels({
              owner,
              repo,
              issue_number: number,
              labels
            });
          }
          
  # Auto-assign reviewers for PRs
  assign-reviewers:
    if: github.event_name == 'pull_request' && github.event.action == 'opened'
    runs-on: ubuntu-latest
    
    steps:
    - name: Assign reviewers
      uses: actions/github-script@v7
      with:
        script: |
          const { owner, repo } = context.repo;
          const { number } = context.issue;
          const author = context.payload.pull_request.user.login;
          
          // Define code owners / reviewers
          const reviewers = ['maintainer1', 'maintainer2', 'senior-dev'];
          
          // Remove PR author from potential reviewers
          const availableReviewers = reviewers.filter(reviewer => reviewer !== author);
          
          // Assign up to 2 random reviewers
          const selectedReviewers = availableReviewers
            .sort(() => Math.random() - 0.5)
            .slice(0, 2);
            
          if (selectedReviewers.length > 0) {
            await github.rest.pulls.requestReviewers({
              owner,
              repo,
              pull_number: number,
              reviewers: selectedReviewers
            });
          }
          
  # Manage stale issues and PRs
  stale:
    if: github.event_name == 'schedule'
    runs-on: ubuntu-latest
    
    steps:
    - name: Mark stale issues and PRs
      uses: actions/stale@v9
      with:
        repo-token: ${{ secrets.GITHUB_TOKEN }}
        stale-issue-message: |
          This issue has been automatically marked as stale because it has not had 
          recent activity. It will be closed if no further activity occurs. 
          
          If this is still relevant, please comment to keep it open.
        stale-pr-message: |
          This pull request has been automatically marked as stale because it has not had 
          recent activity. It will be closed if no further activity occurs.
          
          If you're still working on this, please comment to keep it open.
        close-issue-message: |
          This issue was automatically closed because it has been stale for too long. 
          If you believe this was closed in error, please reopen it.
        close-pr-message: |
          This pull request was automatically closed because it has been stale for too long.
          If you're still working on this, please reopen it and add a comment.
        days-before-stale: 30
        days-before-close: 7
        stale-issue-label: 'stale'
        stale-pr-label: 'stale'
        exempt-issue-labels: 'pinned,security,enhancement'
        exempt-pr-labels: 'pinned,security,work-in-progress'
        
  # Auto-merge approved PRs
  auto-merge:
    if: |
      github.event_name == 'pull_request_review' && 
      github.event.review.state == 'approved' &&
      contains(github.event.pull_request.labels.*.name, 'auto-merge')
    runs-on: ubuntu-latest
    
    steps:
    - name: Enable auto-merge
      uses: actions/github-script@v7
      with:
        script: |
          const { owner, repo } = context.repo;
          const { number } = context.issue;
          
          // Check if all required status checks are passing
          const pr = await github.rest.pulls.get({
            owner,
            repo,
            pull_number: number
          });
          
          if (pr.data.mergeable && pr.data.mergeable_state === 'clean') {
            await github.rest.pulls.merge({
              owner,
              repo,
              pull_number: number,
              merge_method: 'squash'
            });
            
            console.log(`Auto-merged PR #${number}`);
          } else {
            console.log(`PR #${number} is not ready for auto-merge`);
          }
          
  # Close invalid issues
  close-invalid:
    if: github.event_name == 'issues' && github.event.action == 'labeled'
    runs-on: ubuntu-latest
    
    steps:
    - name: Close invalid issues
      if: contains(github.event.label.name, 'invalid')
      uses: actions/github-script@v7
      with:
        script: |
          const { owner, repo } = context.repo;
          const { number } = context.issue;
          
          await github.rest.issues.update({
            owner,
            repo,
            issue_number: number,
            state: 'closed'
          });
          
          await github.rest.issues.createComment({
            owner,
            repo,
            issue_number: number,
            body: `This issue has been closed as invalid. 

            If you believe this was closed in error, please provide more details and reopen.`
          });
