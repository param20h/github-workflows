# Release Automation Workflow
# This workflow automates the release process when tags are created

name: Release Automation

on:
  # Trigger on version tags (e.g., v1.0.0, v2.1.3)
  push:
    tags:
      - 'v*'

jobs:
  release:
    runs-on: ubuntu-latest
    permissions:
      contents: write  # Required to create releases
      
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        # Fetch full history for changelog generation
        fetch-depth: 0
        
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18'
        cache: 'npm'
        registry-url: 'https://registry.npmjs.org'
        
    - name: Install dependencies
      run: npm ci
      
    # Extract version from tag
    - name: Get version from tag
      id: version
      run: echo "VERSION=${GITHUB_REF#refs/tags/v}" >> $GITHUB_OUTPUT
      
    # Build the application
    - name: Build application
      run: npm run build
      
    # Create distribution package
    - name: Create distribution package
      run: |
        mkdir -p dist-package
        cp -r dist/* dist-package/
        cp package.json README.md LICENSE dist-package/
        tar -czf release-${{ steps.version.outputs.VERSION }}.tar.gz -C dist-package .
        zip -r release-${{ steps.version.outputs.VERSION }}.zip dist-package/
        
    # Generate changelog
    - name: Generate changelog
      id: changelog
      run: |
        # Simple changelog generation (you might want to use a more sophisticated tool)
        echo "CHANGELOG<<EOF" >> $GITHUB_OUTPUT
        echo "## Changes in v${{ steps.version.outputs.VERSION }}" >> $GITHUB_OUTPUT
        echo "" >> $GITHUB_OUTPUT
        git log --pretty=format:"- %s (%h)" $(git describe --tags --abbrev=0 HEAD^)..HEAD >> $GITHUB_OUTPUT
        echo "" >> $GITHUB_OUTPUT
        echo "EOF" >> $GITHUB_OUTPUT
        
    # Create GitHub release
    - name: Create GitHub Release
      id: create_release
      uses: actions/create-release@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        tag_name: ${{ github.ref }}
        release_name: Release v${{ steps.version.outputs.VERSION }}
        body: ${{ steps.changelog.outputs.CHANGELOG }}
        draft: false
        prerelease: ${{ contains(github.ref, '-') }}  # Mark as prerelease if tag contains hyphen
        
    # Upload release assets
    - name: Upload tar.gz asset
      uses: actions/upload-release-asset@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        upload_url: ${{ steps.create_release.outputs.upload_url }}
        asset_path: ./release-${{ steps.version.outputs.VERSION }}.tar.gz
        asset_name: release-${{ steps.version.outputs.VERSION }}.tar.gz
        asset_content_type: application/gzip
        
    - name: Upload zip asset
      uses: actions/upload-release-asset@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        upload_url: ${{ steps.create_release.outputs.upload_url }}
        asset_path: ./release-${{ steps.version.outputs.VERSION }}.zip
        asset_name: release-${{ steps.version.outputs.VERSION }}.zip
        asset_content_type: application/zip
        
    # Publish to npm (if it's an npm package)
    - name: Publish to npm
      if: startsWith(github.ref, 'refs/tags/v') && !contains(github.ref, '-')
      run: npm publish
      env:
        NODE_AUTH_TOKEN: ${{ secrets.NPM_TOKEN }}
        
    # Update package managers
    - name: Update Homebrew formula
      if: startsWith(github.ref, 'refs/tags/v') && !contains(github.ref, '-')
      run: |
        # Example of updating a Homebrew formula
        echo "Updating Homebrew formula..."
        # This would typically involve creating a PR to a homebrew tap
        
    # Notify team
    - name: Notify team of release
      uses: 8398a7/action-slack@v3
      with:
        status: success
        text: |
          ðŸŽ‰ New release published!
          Version: v${{ steps.version.outputs.VERSION }}
          Release: https://github.com/${{ github.repository }}/releases/tag/${{ github.ref_name }}
      env:
        SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}
