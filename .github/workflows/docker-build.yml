# Docker Build and Push Workflow
# This workflow builds Docker images and pushes them to a registry

name: Docker Build and Push

on:
  push:
    branches: [ main ]
    # Also trigger on version tags
    tags: [ 'v*' ]
  pull_request:
    branches: [ main ]

env:
  # Registry and image name
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}

jobs:
  build:
    runs-on: ubuntu-latest
    # Required permissions for pushing to GitHub Container Registry
    permissions:
      contents: read
      packages: write
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    # Setup Docker Buildx for advanced features
    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3
      
    # Login to container registry
    - name: Login to Container Registry
      if: github.event_name != 'pull_request'
      uses: docker/login-action@v3
      with:
        registry: ${{ env.REGISTRY }}
        username: ${{ github.actor }}
        password: ${{ secrets.GITHUB_TOKEN }}
        
    # Extract metadata for tags and labels
    - name: Extract metadata
      id: meta
      uses: docker/metadata-action@v5
      with:
        images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
        tags: |
          # Tag as 'latest' for main branch
          type=ref,event=branch
          # Tag with version for tags
          type=ref,event=tag
          # Tag with PR number for pull requests
          type=ref,event=pr
          # Tag as 'latest' for main branch
          type=raw,value=latest,enable={{is_default_branch}}
          
    # Build and push Docker image
    - name: Build and push Docker image
      uses: docker/build-push-action@v5
      with:
        context: .
        # Multi-platform builds
        platforms: linux/amd64,linux/arm64
        # Only push on main branch or tags (not PRs)
        push: ${{ github.event_name != 'pull_request' }}
        tags: ${{ steps.meta.outputs.tags }}
        labels: ${{ steps.meta.outputs.labels }}
        # Enable layer caching
        cache-from: type=gha
        cache-to: type=gha,mode=max
        
    # Security scanning of the built image
    - name: Run Trivy vulnerability scanner
      uses: aquasecurity/trivy-action@master
      with:
        image-ref: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:latest
        format: 'sarif'
        output: 'trivy-results.sarif'
        
    # Upload security scan results
    - name: Upload Trivy scan results
      uses: github/codeql-action/upload-sarif@v3
      if: always()
      with:
        sarif_file: 'trivy-results.sarif'
